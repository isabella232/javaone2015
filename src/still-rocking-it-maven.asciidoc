=  Still Rocking It: A Dozen Demos and Great News for Apache Maven Users
:title: Still Rocking It: A Dozen or More Demos and Great News for Apache Maven Users
:Author:  Jason van Zyl and  Manfred Moser 
:Date: October 2015
:max-width: 45em
:icons:
:copyright: Copyright 2015-present, Takari and simpligility, All Rights Reserved.
:incremental:

== Apache Maven - Still Rocking It
:incremental!:

[quote]
A Dozen Demos and Great News for Apache Maven Users

Jason van Zyl 

* Apache Maven Founder / http://twitter.com/jvanzyl[@jvanzyl]  / http://www.takari.io[www.takari.io]

Manfred Moser

* Apache Maven Committer and Trainer / http://twitter.com/simpligility[@simpligility] / http://www.simpligility.com[www.simpligility.com]

TIP: Hold on tight, this is going to be a wild ride!

== What Are You Going to Learn? 

* Tips & tricks
* Best practices
* New tools, plugins, ...

-> Lots of stuff happening in the Apache Maven ecosystem!

== Before We Get Started 
:incremental!:

* The developers of Maven are  opinionated...
* And so is Maven itself
* Follow best practices, to make your life easier

And...

* Maven is open source
* Work happens on latest code
* Old releases receive no attention or support
* There is no one company behind Maven - its a community!

TIP: Don't worry! It's not bad, it's good!

== Do NOT Use Old Maven Versions
:incremental:

* Maven 1 - doh!
* Maven 2 - seriously, just don't do it!
* Maven Ant Tasks - nope, based on Maven 2 and unmaintained
* Maven 3.0.x - old but stable
* Maven 3.1.x - old with issues
* Maven 3.2.x - new but not latest supported
* 'None' of the above should be used
* Instead keep up to date with newer releases

TIP: Unless you are prepared to maintain those projects yourself, use Maven 3.3.3+

== Avoid Other Old Stuff 
:incremental!:

Be 'very' careful about

* IDEs using old Maven versions
* Using different version on command line / CI server
* Old IDE plugins
* Old Maven plugins
* JDK 4, 5, and 6 usage

-> Keeping to use old stuff causes rotting.

== Now Let's Get Started
:incremental!:

We will look at things that ...

* Simplify project build
* Control project build
* Improve development
* And build performance
* Provide new tools
* And much more

== Where Are We At?

* Apache Maven 3.3.3/3.3.6
* Apache Maven Plugins - require 3+
* Java 1.7+ for build execution
* Codehaus Plugins migrated to http://www.mojohaus.org/[MojoHaus]

== Misc Newer 'Small' Features

* JSR330-based injection for extensions and plugins
* Transitive dependency `<exclusions>` with `*`
* Pluggable reactor
* Version values allow `${revision}`, `${sha1}`, `${changelist}`
* Version ranges in `<parent>`
* Central Repository access defaults to HTTPS

== Maven Wrapper
:incremental!:

* Unix and Windows scripts 
* Within project structure -> version controlled
* Automatic download and install of Maven
* Uses `~/.m2/wrapper` as cache
* Removes need to provision Maven
* For developer and CI server provisioning
* Specifies Maven version

== Maven Wrapper
:incremental!:

----
mvn -N io.takari:maven:wrapper
----

And then just use similar commands to 

----
./mvnw clean install
mvnw.bat clean install
----

== Project Local Configuration
:incremental!:

`.mvn` directory

* Project local
* In root folder of multi-module project
* Version controlled with source
* Maven 3.3.1+
* Controls how project is built

Used for

* JVM configuration
* Maven configuration
* Core extension loading

== .mvn JVM Configuration
:incremental!:

* No more global, polluted `MAVEN_OPTS`
* `.mvn/jvm.config`: 

----
-Xmx8192m
----

== .mvn Maven Configuration
:incremental!:

* `.mvn/maven.config`
* Maven invocation parameters

----
--T 8
--builder smart
--U
----

== Core Extension Loading
:incremental!:

Allow different behavior of Maven itself

* Larger scope and impact than plugins 
* Local repository access
* Module ordering in reactor
* Parse POM in different syntax - Polyglot Maven 

WARNING: Large potential, but be careful...

== Core Extensions Loading
:incremental!:

`.mvn/extensions.xml`:

----
<?xml version="1.0" encoding="UTF-8"?>
<extensions>
  <extension>
    <groupId>io.takari.aether</groupId>
    <artifactId>takari-concurrent-localrepo</artifactId>
     <version>0.0.7</version>
  </extension>
  <extension>
    <groupId>io.takari.maven</groupId>
    <artifactId>takari-smart-builder</artifactId>
    <version>0.4.1</version>
  </extension>
</extensions>
----

== Control Your Build
:incremental!:

Beyond wrapper and `.mvn`

* Control plugin versions with organization POM
** https://github.com/simpligility/progressive-organization-pom[progressive-organization-pom]
** https://github.com/basepom/basepom[basepom]
** various Maven controlled parents
* Use http://maven.apache.org/enforcer/maven-enforcer-plugin/[Enforcer plugin]
** with standard or http://www.mojohaus.org/extra-enforcer-rules/[extra rules]
** or write your own rules

[quote]
Back to the shiny, new extensions...

== Concurrent Local Repository Access

* Multiple builds running
* E.g. running on CI server
* Using `install`

-> Can corrupt maven-metadata, mix snapshot versions,...

== Reactor Improvements
:incremental!:

image::images/smart-builder-scheduler.png[scale=80]


== Reactor Improvements
:incremental!:

Use extension or install in lib

Traditional Parallel::

----
mvn -T 4 clean deploy
----

Takari Smart Builder::

----
mvn clean deploy --builder smart -T4
----

TIP: Check out the http://takari.io/book/30-team-maven.html#takari-smart-builder[documentation].

== Polyglot Maven
:incremental!:

* Support for POM written in 
** Ruby
** YAML
** Groovy
** Others
* Produces POM for deployment and tool support
* https://github.com/takari/polyglot-maven[Project] and 
https://github.com/takari/polyglot-maven-examples[Examples] available
* Short and clear
* Take advantage of language/markup

== Polyglot Example - JRuby Build

* Uses Maven
* And Maven Wrapper
* Polyglot Maven `pom.rb`
* JRuby developers working on polyglot!

----
<extension>
  <groupId>io.takari.polyglot</groupId>
  <artifactId>polyglot-ruby</artifactId>
  <version>0.1.13</version>
</extension>
----

TIP: https://github.com/jruby/jruby[Check it out.]

== pom.rb

----
version = File.read( File.join( basedir, 'VERSION' ) ).strip
project 'JRuby', 'https://github.com/jruby/jruby' do
  model_version '4.0.0'
  inception_year '2001'
  id 'org.jruby:jruby-parent', version
  inherit 'org.sonatype.oss:oss-parent:7'
  packaging 'pom'
  organization 'JRuby', 'http://jruby.org'
  [ 'headius', 'enebo', 'wmeissner', 'BanzaiMan', 'mkristian' ].each do |name|
    developer name do
      name name
      roles 'developer'
    end
  end
...
----


== Polyglot Example - SnakeYAML

* Uses Maven 
* And Maven Wrapper
* Polyglot Maven `pom.yaml`
* SnakeYAML developers helping on polyglot!

----
<extension>
  <groupId>io.takari.polyglot</groupId>
  <artifactId>polyglot-yaml</artifactId>
  <version>0.1.13</version>
</extension>
----

TIP: See the https://bitbucket.org/asomov/snakeyaml/src[source.]


== pom.yaml

----
modelVersion: 4.0.0
groupId: org.yaml
artifactId: snakeyaml
version: 1.17-SNAPSHOT
packaging: jar 
properties: {project.scm.id: bitbucket, project.build.sourceEncoding: UTF-8}
name: SnakeYAML
...
dependencies:
- {artifactId: junit, groupId: junit, optional: false, scope: test, type: jar, version: '4.12'}
- {artifactId: spring, groupId: org.springframework, optional: false, scope: test,
  type: jar, version: 2.5.6}
----

== Polyglot Example - Groovy

* Uses Maven 
* And Maven Wrapper
* Polyglot Maven `pom.groovy`
* GMaven developers helping on polyglot!

----
<extension>
  <groupId>io.takari.polyglot</groupId>
  <artifactId>polyglot-groovy</artifactId>
  <version>0.1.13</version>
</extension>
----

== pom.groovy

////
TBD do we have a good groovy example using it in 'production' 
////

----
project {
  modelVersion '4.0.0'    
  groupId 'io.takari.polyglot'
  artifactId 'groovy-project'
  version '0.0.1-SNAPSHOT'
  build {
    $execute(id: 'hello', phase: 'validate') {
      println "Groovy, meet Maven"
    }           
  }
}
----

////
== Takari Maven Shell
:incremental!:

Shell with Maven specific extensions

https://github.com/takari/takari-shell

TBD do we add this, what do we show/say
////

== Incremental Build

* Dedicated, generic API for incremental builds
* Tracks inputs, processes and outputs
* Maven-specific implementation included

-> can be used to make Maven plugins support incremental behaviour easily

TIP: Source on  https://github.com/takari/io.takari.incrementalbuild[GitHub]

////
== Incremental Example
:incremental!:

TBD Example of to make incremental plugin (antlr build)
////


== Takari Lifecycle
:incremental!:

New Maven Plugin

* Uses incremental support library for sources and resources
* One plugin for whole lifecycle
* Replaces default lifecycle plugins (resources, compiler, jar, install, deploy) 
* Uses `extensions`
* Packaging `pom`, `takari-jar`, `takari-maven-plugin`, `takari-maven-component`
* Eclipse Java compiler for improved incremental compilation

TIP: http://takari.io/book/40-lifecycle.html#the-takari-lifecycle[Documentation] and
https://github.com/takari/takari-lifecycle[source] are open source.

== Takari Lifecycle

Example simple usage:

----
<packaging>takari-jar</packaging>

...

<build>
  <plugins>
    <plugin>
      <groupId>io.takari.maven.plugins</groupId>
      <artifactId>takari-lifecycle-plugin</artifactId>
      <extensions>true</extensions>
    </plugin>
  </plugins>
</build>
----

== Maven Testing Tools and Beyond
:incremental!:

* Maven plugin testing support
* Test project generation from dot files
* Proto plugin - archetype replacement


== Plugin Testing
:incremental!:

Maven plugin testing framework including IDE support: 

* Unit testing
* Integration testing

----
<dependency>
  <groupId>io.takari.maven.plugins</groupId>
  <artifactId>takari-plugin-testing</artifactId>
  <version>${takari.test.version}</version>
  <scope>test</scope>
</dependency>
<dependency>
  <groupId>io.takari.maven.plugins</groupId>
  <artifactId>takari-plugin-integration-testing</artifactId>
  <version>${takari.test.version}</version>
  <type>pom</type>
  <scope>test</scope>
</dependency>
----

TIP: Check the http://takari.io/book/70-testing.html[docs]

== Integration Testing Examples
:incremental!:

* Multiple invocations 'of' Maven builds 'from' Maven build
* Android Maven Plugin and NDK Plugin
* Replacement of invoker usage
----
@RunWith(MavenJUnitTestRunner.class)
@MavenVersions({"3.0.5","3.3.3"})
public class HelloFlashLightSampleIT {
----

////
== Generations
:incremental!:

TBD

maybe .. depending on status, at least update what is there and what is coming
////


== Maven Development Tools
:incremental!:

* M2e
* MavenDevTools
* TakariLifecycle support

Benefits:

* Workspace resolution for
** Dependencies
** Plugins
** Extensions
** Maven itself
* Maven Junit Test UI
* Maven build view

TIP: Demo time!

== Eclipse and M2e
:incremental!:

* Further improvements for M2e and WTP integration
* Polyglot  Maven extensions

== IntelliJ
:incremental!:

TBD

IntelliJ - change request, push Jetbrains 

== Netbeans
:incremental!:

TBD
?? tbd - download and check it out

== Central Repository 
:incremental!:

[quote]
aka. Maven Central

* Largest Maven2 format repository
* High performance, global CDN 
* > 17 billion download in 2014
* > 1 million GAV coordinates
* Default in Apache Maven and others
* HTTPS

-> Sponsored by Sonatype

And the components come from...

== OSSRH and Forges
:incremental!:

Input funnel for Central Repository

* OSSRH - large deployment of Nexus Repository Manager
* Apache, JBoss, ... - secondary Nexus instances
* Community support - on-boarding and documentation

== More OSSRH and Central Stats

* currently about 100k projects total
* approx. 3000 new projects each month (GA)
* 10 - 30 project verified and onbarded per day
* approx. 30.000 new releases each month (GAV)

== Central Repository - Next

Full replication to Google Cloud Storage:

* Playground for data-mining and exploration
* Experiments with new features like
** https://http2.github.io/[HTTP/2] (evolved SPDY)
** Search service
** more.. 

TIP: Contact us if you want to play with it.
 
== Other Cool Stuff
:incremental!:

Lots of things happening: 

* Evolving Apache and Mojohaus plugins
* Docker Maven Plugins from https://github.com/spotify/docker-maven-plugin[spotify] and others
* http://simpligility.github.io/android-maven-plugin/[Android Maven Plugin] and beyond
* https://github.com/maven-nar[Maven NAR] 
* Various JS and web development related plugins
* https://github.com/simpligility/maven-repository-tools[Maven Repository Tools]
* flatten-maven-plugin

== Summary
:incremental!:

* Lots of things are moving
* We only touched the tip of the iceberg
* What did you contribute?

TIP: Join us on the Maven users mailing list and beyond!

== Next?
:incremental!:

Join us for a http://takari.io/events.html[Maven Hangout On Air]

* Demo your solution or tip
* Ask your question
* Discuss user questions
* And developer questions

== The End 
:incremental!:

Questions, Remarks &  Discussion

TIP: Slides and examples at http://takari.github.io/javaone2015/[http://takari.github.io/javaone2015/]

== Resources
:incremental:

* http://maven.apache.org/[Apache Maven]
* http://www.mojohaus.org/[MojoHaus]
* http://takari.io/book/index.html[Takari including documentation]

